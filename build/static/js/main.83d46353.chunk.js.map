{"version":3,"sources":["Preview.js","UserTexts.js","ImageSelector.js","App.js","serviceWorker.js","index.js"],"names":["Preview","_this$props","this","props","image","top","bottom","react_default","a","createElement","className","id","style","backgroundImage","concat","backgroundSize","backgroundRepeat","backgroundPosition","Component","UserTexts","topChange","event","_this","setTop","target","value","bottomChange","setBottom","type","onChange","onClick","node","document","querySelector","domtoimage","toPng","then","dataUrl","img","Image","src","body","appendChild","catch","error","console","ImageSelector","onImageClick","setImage","_this2","imageList","images","map","key","alt","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setTopText","text","setState","topText","setBottomText","bottomText","path","previewImage","state","Preview_Preview","UserTexts_UserTexts","ImageSelector_ImageSelector","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83d46353.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Preview extends Component {\r\n  render() {\r\n    const { image, top, bottom } = this.props;\r\n    return (\r\n      <div\r\n        className=\"preview\"\r\n        id=\"preview\"\r\n        style={{\r\n          backgroundImage: `url(${image})`,\r\n          backgroundSize: \"contain\",\r\n          backgroundRepeat: \"no-repeat\",\r\n          backgroundPosition: \"center\"\r\n        }}\r\n      >\r\n        <h1 className=\"top-text\">{top}</h1>\r\n        <h1 className=\"bottom-text\">{bottom}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport domtoimage from \"dom-to-image-more\";\r\nexport default class UserTexts extends Component {\r\n  topChange = event => {\r\n    this.props.setTop(event.target.value);\r\n  };\r\n\r\n  bottomChange = event => {\r\n    this.props.setBottom(event.target.value);\r\n  };\r\n\r\n  render() {\r\n    const { top, bottom } = this.props;\r\n    const makePic = () => {\r\n      const node = document.querySelector(\".preview\");\r\n      domtoimage\r\n        .toPng(node)\r\n        .then(function(dataUrl) {\r\n          var img = new Image();\r\n          img.src = dataUrl;\r\n          document.body.appendChild(img);\r\n        })\r\n        .catch(function(error) {\r\n          console.error(\"oops, something went wrong!\", error);\r\n        });\r\n    };\r\n\r\n    return (\r\n      <div className=\"user-texts\">\r\n        <div>\r\n          <label>Top Text:</label>\r\n          <input type=\"text\" value={top} onChange={this.topChange} />\r\n        </div>\r\n        <div>\r\n          <label>Bottom Text:</label>\r\n          <input type=\"text\" value={bottom} onChange={this.bottomChange} />\r\n        </div>\r\n        <div>\r\n          <button type=\"Submit\" onClick={makePic} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class ImageSelector extends Component {\r\n  onImageClick = event => {\r\n    this.props.setImage(event.target.src);\r\n  };\r\n  render() {\r\n    const { images } = this.props;\r\n    const imageList = images.map(image => (\r\n      <li key={image}>\r\n        <img src={image} alt=\"Selector\" onClick={this.onImageClick} />\r\n      </li>\r\n    ));\r\n    return <ul className=\"image-selector\">{imageList}</ul>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Preview from \"./Preview\";\r\nimport UserTexts from \"./UserTexts\";\r\nimport ImageSelector from \"./ImageSelector\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      previewImage: \"./Images/Kid.jpg\",\r\n      topText: \"Top TEXT\",\r\n      bottomText: \"Bottom TEXT\",\r\n      images: [\r\n        \"./Images/Kid.jpg\",\r\n        \"./Images/StarTrek.png\",\r\n        \"./Images/Taken.jpg\"\r\n      ]\r\n    };\r\n  }\r\n\r\n  setTopText = text => {\r\n    this.setState({ topText: text });\r\n  };\r\n\r\n  setBottomText = text => {\r\n    this.setState({ bottomText: text });\r\n  };\r\n\r\n  setImage = path => {\r\n    this.setState({ previewImage: path });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Preview\r\n          image={this.state.previewImage}\r\n          top={this.state.topText}\r\n          bottom={this.state.bottomText}\r\n        />\r\n        <UserTexts\r\n          top={this.state.topText}\r\n          setTop={this.setTopText}\r\n          bottom={this.state.bottomText}\r\n          setBottom={this.setBottomText}\r\n        />\r\n        <ImageSelector images={this.state.images} setImage={this.setImage} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}